package com.belnitskii.telegrambotcb.service;

import com.belnitskii.telegrambotcb.config.ApiUrls;
import com.belnitskii.telegrambotcb.constant.ValutaCharCode;
import com.belnitskii.telegrambotcb.model.Record;
import com.belnitskii.telegrambotcb.model.ValCurs;
import com.belnitskii.telegrambotcb.model.Valuta;
import com.belnitskii.telegrambotcb.util.DateTimeUtil;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.expression.ParseException;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Scanner;

import static com.belnitskii.telegrambotcb.util.ChartUtil.generateChart;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏.
 * –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã, –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã.
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å API –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏.
 */
@Service
public class CurrencyService {
    private static final Logger logger = LoggerFactory.getLogger(CurrencyService.class);

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –ø–æ –µ—ë —Å–∏–º–≤–æ–ª—É (charCode) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫—É—Ä—Å–æ–º.
     *
     * @param charCode –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR).
     * @return –°—Ç—Ä–æ–∫–∞ —Å –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç—ã –∏–ª–∏ {@code null} –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
     * @throws ParseException –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö.
     */
    public String getLatestRate(String charCode) {
        List<Record> recordList = getRecordListFromNow(charCode, 1);
        DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        LocalDate lastDateRecord = LocalDate.parse(recordList.getLast().getDate(), FORMATTER);

        LocalDate tomorrow = LocalDate.now().plusDays(1);


        //–ï—Å–ª–∏ –≤ XML –µ—Å—Ç—å –∫—É—Ä—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å –∑–∞ –¥–≤–∞ –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞)
        if (tomorrow.isEqual(lastDateRecord)) {
            return getRatesFromNow(charCode, 2);
        }

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º JSON, –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –∫—É—Ä—Å—É –∏–∑ XML
        String jsonRate = getLatestRateJson(charCode);
        if (jsonRate != null && jsonRate.equals(tomorrow.toString().substring(0, 5))) {
            return getRatesFromNow(charCode, 1) + jsonRate;
        }

        //–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        return getRatesFromNow(charCode, 1);
    }

    private String getLatestRateJson(String charCode) {
        try {
            String splitResponseUrl = splitResponseUrl(new URL(ApiUrls.CURRENCY_RATES_URL));
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(splitResponseUrl);
            JsonNode locatedNoteValuta = rootNode.path("Valute").path(charCode);
            Valuta valuta = mapper.readValue(locatedNoteValuta.toString(), Valuta.class);
            LocalDate dateUpdated = DateTimeUtil.toLocalDate(rootNode.path("Date").asText());

            String formattedRate = formatRate(dateUpdated, valuta.getValue(), 0);

            logger.info("–£—Å–ø–µ—à–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª JSON –¥–ª—è {}: \n{}", charCode, formattedRate);
            logger.info(formattedRate);
            return formattedRate;
        } catch (IOException e) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–ª–∏–∑–æ–≤–∞—Ç—å JSON –∏ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {}", charCode);
            return null;
        }
    }



    public String getRatesFromNow(String charCodeName, int limit) {
        try {
            List<Record> recordList = getRecordListFromNow(charCodeName, limit);
            StringBuilder stringBuilder = new StringBuilder();

            stringBuilder.append(getHandler());

            for (int i = recordList.size() - 1; i >= 1; i--) {
                double delta = recordList.get(i).getValue() - recordList.get(i - 1).getValue();
                String date = recordList.get(i).getDate().substring(0, 5);
                String value = String.format("%.4f", recordList.get(i).getValue()); // –ò–∑–º–µ–Ω–∏–ª –Ω–∞ 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                String deltaStr = String.format("%s%.2f", delta >= 0.0 ? "+" : "", delta);

                stringBuilder.append("<code>")
                        .append(String.format("%-6s", date))
                        .append(" |    ")
                        .append(String.format("%-11s", value))
                        .append(" | ")
                        .append(String.format("%-6s", deltaStr))
                        .append("</code>\n");
            }
            logger.info(stringBuilder.toString());
            return stringBuilder.toString();
        } catch (ParseException e) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å XML –∏ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {} –∑–∞ –Ω–µ–¥–µ–ª—é", charCodeName);
            return null;
        }
    }

    private List<Record> getRecordListFromNow(String charCodeName, int limit) {
        try {
            URL url = getUrlXmlMonth(charCodeName);
            String splitResponseUrl = splitResponseUrl(url);
            XmlMapper xmlMapper = new XmlMapper();
            xmlMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            ValCurs valCurs = xmlMapper.readValue(splitResponseUrl, ValCurs.class);
            logger.info("–£—Å–ø–µ—à–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª XML –¥–ª—è {}", charCodeName);

            List<Record> recordList = valCurs.getRecords().subList(
                    Math.max(0, valCurs.getRecords().size() - (limit + 1)),
                    valCurs.getRecords().size()
            );
            return recordList;
        } catch (IOException e) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å XML –∏ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {} –∑–∞ –Ω–µ–¥–µ–ª—é", charCodeName);
            return null;

        }
    }

    private String getHandler() {
        String handler = "<code> " +
                String.format("%-6s", "üìÖ") +  // –≠–º–æ–¥–∑–∏ + 1 –ø—Ä–æ–±–µ–ª
                "|    " +
                String.format("%-11s", "üí∞ EUR") + // –≠–º–æ–¥–∑–∏ + EUR + 2 –ø—Ä–æ–±–µ–ª–∞
                " | " +
                String.format("%-6s", "üìà Œî") + // –≠–º–æ–¥–∑–∏ + Œî + 1 –ø—Ä–æ–±–µ–ª
                "</code>\n";
        return handler;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –ø–æ –µ—ë —Å–∏–º–≤–æ–ª—É (charCodeName).
     * –°—Ç—Ä–æ–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª.
     *
     * @param charCodeName –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR).
     * @return –§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∏–ª–∏ {@code null} –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
     */
    public File getChartRatesFromNow(String charCodeName, int limit) {
        try {
            URL url = getUrlXmlMonth(charCodeName);
            String splitResponseUrl = splitResponseUrl(url);
            XmlMapper xmlMapper = new XmlMapper();
            xmlMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            ValCurs valCurs = xmlMapper.readValue(splitResponseUrl, ValCurs.class);
            logger.info("–£—Å–ø–µ—à–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª XML –¥–ª—è {}", charCodeName);
            List<Record> recordList = valCurs.getRecords().subList(Math.max(0, valCurs.getRecords().size() - limit), valCurs.getRecords().size());
            File chart = generateChart(charCodeName, recordList);
            logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", chart.getAbsolutePath());
            return chart;
        } catch (IOException e) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–ª–∏–∑–æ–≤–∞—Ç—å XML, –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ {} –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", charCodeName);
            return null;
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã –∑–∞ –º–µ—Å—è—Ü.
     *
     * @param charCode –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR).
     * @return URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XML –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é.
     */
    private URL getUrlXmlMonth(String charCode) {
        try {
            logger.info("–ü–æ–ª—É—á–∞—é url –¥–ª—è {}", charCode);
            String id = ValutaCharCode.valueOf(charCode).getCode();
            String dateNow = LocalDate.now().plusDays(5).format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String dateBeforeWeek = LocalDate.now().minusDays(40).format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            URL urlXml = new URL("https://www.cbr.ru/scripts/XML_dynamic.asp?" +
                    "date_req1=" + dateBeforeWeek +
                    "&date_req2=" + dateNow +
                    "&VAL_NM_RQ=" + id);
            logger.info("URL {} ‚Äì {}", charCode, urlXml);
            return urlXml;
        } catch (MalformedURLException e){
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å url –¥–ª—è XML ", e);
            return null;
        }
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É.
     *
     * @param url URL –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
     * @return –°—Ç—Ä–æ–∫–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º URL.
     * @throws IOException –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
     */
    private String splitResponseUrl(URL url) throws IOException {
        Scanner scanner = new Scanner((InputStream) url.getContent());
        StringBuilder result = new StringBuilder();
        while (scanner.hasNext()) {
            result.append(scanner.nextLine());
        }
        return result.toString();
    }

    private String formatRate(LocalDate date, Double rate, double delta) {
        return String.format("<code>%-6s | %11.4f | %+6.2f</code>\n", formatDate(date), rate, delta);
    }

    private String formatDate(LocalDate date) {
        return date.format(DateTimeFormatter.ofPattern("dd.MM"));
    }
}
