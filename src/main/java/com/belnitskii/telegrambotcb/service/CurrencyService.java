package com.belnitskii.telegrambotcb.service;

import com.belnitskii.telegrambotcb.config.ApiUrls;
import com.belnitskii.telegrambotcb.constant.ValutaCharCode;
import com.belnitskii.telegrambotcb.model.Record;
import com.belnitskii.telegrambotcb.model.ValCurs;
import com.belnitskii.telegrambotcb.model.Valuta;
import com.belnitskii.telegrambotcb.util.DateTimeUtil;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.expression.ParseException;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.LocalDate;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import static com.belnitskii.telegrambotcb.util.ChartUtil.generateChart;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏.
 * –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã, –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã.
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å API –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏.
 */
@Service
public class CurrencyService {
    private static final Logger logger = LoggerFactory.getLogger(CurrencyService.class);
    private static final String TABLE_HEADER = "<code> " +
            String.format("%-6s", "üìÖ") +  // –≠–º–æ–¥–∑–∏ + 1 –ø—Ä–æ–±–µ–ª
            "|    " +
            String.format("%-11s", "üí∞ EUR") + // –≠–º–æ–¥–∑–∏ + EUR + 2 –ø—Ä–æ–±–µ–ª–∞
            "| " +
            String.format("%-6s", "  üìàŒî") + // –≠–º–æ–¥–∑–∏ + Œî + 1 –ø—Ä–æ–±–µ–ª
            "</code>\n";

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –ø–æ –µ—ë —Å–∏–º–≤–æ–ª—É (charCode) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫—É—Ä—Å–æ–º.
     *
     * @param charCode –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR).
     * @return –°—Ç—Ä–æ–∫–∞ —Å –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç—ã –∏–ª–∏ {@code null} –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
     * @throws ParseException –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö.
     */
    public String getLatestRates(String charCode) {
        List<Record> recordList = fetchRecordsFromNow(charCode, 2);
        LocalDate lastDateRecord = LocalDate.parse(recordList.getLast().getDate(), DateTimeUtil.FORMATTER);
        LocalDate tomorrow = LocalDate.now().plusDays(1);

        //–ï—Å–ª–∏ –≤ XML –µ—Å—Ç—å –∫—É—Ä—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å –∑–∞ –¥–≤–∞ –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞)
        if (tomorrow.isEqual(lastDateRecord)) {
            return getRatesForPeriod(charCode, 2);
        }

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º JSON, –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –∫—É—Ä—Å—É –∏–∑ XML
        String jsonRate = fetchLatestJsonRate(charCode);
        if (jsonRate != null && jsonRate.equals(tomorrow.toString().substring(0, 5))) {
            return getRatesForPeriod(charCode, 2) + jsonRate;
        }

        //–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        return getRatesForPeriod(charCode, 1);
    }

    public String getRatesForPeriod(String charCodeName, int limit) {
        List<Record> recordList = fetchRecordsFromNow(charCodeName, limit + 1);
        StringBuilder stringBuilder = new StringBuilder().append(TABLE_HEADER);
        for (int i = recordList.size() - 1; i >= 1; i--) {
            double delta = recordList.get(i).getValue() - recordList.get(i - 1).getValue();
            stringBuilder.append(formatRate(LocalDate.parse(recordList.get(i).getDate(), DateTimeUtil.FORMATTER), recordList.get(i).getValue(), delta));
        }
        logger.info(stringBuilder.toString());
        return stringBuilder.toString();
    }

    private String fetchLatestJsonRate(String charCode) {
        try {
            String jsonContent = readUrlContent(new URL(ApiUrls.CURRENCY_RATES_URL));
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(jsonContent);

            JsonNode locatedNoteValuta = rootNode.path("Valute").path(charCode);
            if (locatedNoteValuta.isMissingNode()) {
                logger.warn("–í–∞–ª—é—Ç–∞ {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON", charCode);
                return null;
            }
            Valuta valuta = mapper.treeToValue(locatedNoteValuta, Valuta.class);
            LocalDate dateUpdated = DateTimeUtil.toLocalDate(rootNode.path("Date").asText());
            String formattedRate = formatRate(dateUpdated, valuta.getValue(), 0);
            logger.info("–£—Å–ø–µ—à–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª JSON –¥–ª—è {}: \n{}", charCode, formattedRate);
            logger.info(formattedRate);
            return formattedRate;
        } catch (IOException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –¥–ª—è {}: {}", charCode, e.getMessage(), e);
            return null;
        }
    }

    private List<Record> fetchRecordsFromNow(String charCodeName, int limit) {
        try {
            URL url = constructXmlUrl(charCodeName);
            String xmlContent = readUrlContent(url);
            XmlMapper xmlMapper = new XmlMapper();
            xmlMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            ValCurs valCurs = xmlMapper.readValue(xmlContent, ValCurs.class);
            logger.info("–£—Å–ø–µ—à–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª XML –¥–ª—è {}", charCodeName);
            if (valCurs.getRecords().isEmpty()) {
                logger.warn("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è {}", charCodeName);
                return Collections.emptyList();
            }
            return valCurs.getRecords().subList(Math.max(0, valCurs.getRecords().size() - limit), valCurs.getRecords().size());
        } catch (IOException e) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å XML –∏ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {} –∑–∞ –ø–µ—Ä–∏–æ–¥ {}: {}", charCodeName, limit, e.getMessage(), e);
            return Collections.emptyList();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –ø–æ –µ—ë —Å–∏–º–≤–æ–ª—É (charCodeName).
     * –°—Ç—Ä–æ–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª.
     *
     * @param charCodeName –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR).
     * @return –§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∏–ª–∏ {@code null} –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
     */
    public File getChartRatesFromNow(String charCodeName, int limit) {
        try {
            File chart = generateChart(charCodeName, fetchRecordsFromNow(charCodeName, limit));
            logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", chart.getAbsolutePath());
            return chart;
        } catch (IOException e) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–ª–∏–∑–æ–≤–∞—Ç—å XML, –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ {} –∑–∞ {} –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {}", charCodeName, limit, e.getMessage(), e);
            return null;
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã –∑–∞ –º–µ—Å—è—Ü.
     *
     * @param charCode –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR).
     * @return URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XML –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é.
     */
    private URL constructXmlUrl(String charCode) throws MalformedURLException {
        logger.info("–ü–æ–ª—É—á–∞—é url –¥–ª—è {}", charCode);
        String id = ValutaCharCode.valueOf(charCode).getCode();
        String dateNow = LocalDate.now().plusDays(5).format(DateTimeUtil.CB_DATE_FORMAT);
        String dateBeforeWeek = LocalDate.now().minusDays(40).format(DateTimeUtil.CB_DATE_FORMAT);

        String urlString = String.format(ApiUrls.CB_XML_URL_TEMPLATE, dateBeforeWeek, dateNow, id);
        return new URL(urlString);
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É.
     *
     * @param url URL –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
     * @return –°—Ç—Ä–æ–∫–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º URL.
     * @throws IOException –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
     */
    private String readUrlContent(URL url) throws IOException {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))) {
            return reader.lines().collect(Collectors.joining("\n"));
        }
    }

    private String formatRate(LocalDate date, Double rate, double delta) {
        return String.format("<code>%-6s | %11.4f    | %+6.2f</code>\n", DateTimeUtil.formatDate(date), rate, delta);
    }
}
